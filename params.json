{"name":"Backbone.facetr","tagline":"","body":"# Backbone.Facetr\r\n\r\nVERSION 0.1.0 (EXPERIMENTAL)\r\n\r\n### <a name=\"contents\"></a> CONTENTS\r\n\r\n* [INTRODUCTION](#introduction)\r\n* [INSTALLATION](#installation)\r\n* [BASIC USAGE](#basic-usage)\r\n* [DOT NOTATION](#dot-notation)\r\n* [API REFERENCE](#api-reference)\r\n* [LICENSE](#license)\r\n\r\n### <a name=\"introduction\"></a> INTRODUCTION\r\n\r\nBackbone.Facetr is a plugin which enables filtering of Backbone collections through facets, using an elegant API and with fast performance time.\r\n\r\nIt works flawlessly up to 2500 items; computation starts getting slower with 5000 - 10000 items. This is however an \r\nearly version; optimizations may improve performance in future realeases.\r\n\r\n\r\n### <a name=\"installation\"></a> INSTALLATION\r\n\r\n\t<!DOCTYPE html>\r\n\t<html>\r\n\t\t....\r\n\r\n\t\t<!-- include Backbone.Facetr dependencies -->\r\n\t\t<script src=\"js/lib/underscore.js\"></script>\r\n\t\t<script src=\"js/lib/backbone.js\"></script>\r\n\r\n\t\t<!-- include Backbone.Facetr code -->\r\n\t\t<script src=\"js/code/backbone.facetr.js\"></script>\r\n\t\t<!-- include your js code -->\r\n\t        <script> ..... </script>\r\n\t\t</body>\r\n\t</html>\r\n\r\n\r\n### <a name=\"basic-usage\"></a> BASIC USAGE\r\n\r\n\t// create a collection with few test items\r\n\tvar collection = new Backbone.Collection([\r\n\t\t{\r\n\t\t\t'Name' \t\t: {\r\n\t\t\t\t'FirstName' : 'Bob',\r\n\t\t\t\t'LastName' : 'Smith'\r\n\t\t\t},\r\n\t\t\t'Age'  \t\t: 20,\r\n\t\t\t'Country' \t: 'Australia',\r\n\t\t\t'Hobbies'\t: ['fishing','painting','playing the ukulele']\r\n\t\t},\r\n\t\t{\r\n\t\t\t'Name' \t\t: {\r\n\t\t\t\t'FirstName' : 'Otto',\r\n\t\t\t\t'LastName' \t: 'Von Braun'\r\n\t\t\t},\r\n\t\t\t'Age'  \t\t: 35,\r\n\t\t\t'Country' \t: 'New Zealand',\r\n\t\t\t'Hobbies'\t: ['drawing', 'painting', 'shopping']\r\n\t\t},\r\n\t\t{\r\n\t\t\t'Name' \t\t: {\r\n\t\t\t\t'FirstName' : 'Sarah',\r\n\t\t\t\t'LastName'\t: 'Smith'\r\n\t\t\t},\r\n\t\t\t'Age'  \t\t: 28,\r\n\t\t\t'Country' \t: 'Ireland',\r\n\t\t\t'Hobbies'\t: ['shopping','painting']\r\n\t\t}\r\n\t]);\r\n\r\n\tFacetr(collection).facet('Age').value(20); // collection contains only 'Sarah Smith'\r\n\tFacetr(collection).facet('Hobbies').value('fishing'); // contains 'Sarah Smith' and 'Bob Smith' \r\n\tFacetr(collection).facet('Age').removeValue(20); // contains only 'Bob Smith'\r\n\r\n\t// removes all facet values and restores original collection content\r\n\tFacetr(collection).clearValues() \r\n\r\n\t// if chaining is not your cup of tea, the following is equivalent to the above code\r\n\tvar facetCollection = Facetr(collection); // returns a FacetCollection object\r\n\tvar ageFacet = facetCollection.facet('Age'); // returns a Facet object\r\n\tvar hobbiesFacet = facetCollection.facet('Hobbies');\r\n\r\n\tageFacet.value(20);\t// returns a FacetExp object\r\n\thobbiesFacet.value('fishing');\r\n\tageFacet.removeValue(20);\r\n\r\n\t// read the API Reference section for more\r\n\t// most example will use the above collection reference to illustrate functionalities\r\n\r\n\r\n### <a name=\"dot-notation\"></a> DOT NOTATION\r\n\r\n\tSyntax: PropertyName{1}(.PropertyName)*\r\n\r\nIn the context of Facetr, Dot Notation refers to the syntax used to define facets on a collection. Using the \r\nFacetr Dot Notation it is possible to define facets on properties of a Model, as well as on properties of its properties.\r\n\r\nFor example, consider the following model:\r\n\r\n\tvar model = new Backbone.Model({\r\n\t\t'Name' : {\r\n\t\t\t'FirstName' : 'John',\r\n\t\t\t'LastName' : ['Smith','White']\r\n\t\t},\r\n\t\t'City' : 'London',\r\n\t\t'Age' : 45,\r\n\t\t'FamilyMembers' : [\r\n            { 'Name' : 'Robert' },\r\n            { 'Name' : 'Margaret' }\r\n        ]\r\n\t});\r\n\r\nTo add a facet on property 'FirstName' the following expression in Dot Notation syntax can be used: 'Name.FirstName'.\r\n\r\n\r\n\tFacetr(collection).facet('Name.FirstName');\r\n\r\n\r\nTheoretically there is no depth limit for a Dot Notation expression (e.g. PropertyName1.PropertyName2...PropertyNameN), the only \r\nlimitation being the common sense.\r\n\r\nA facet can only be added on a Backbone Model or object property having any of the following value types:\r\n \r\n* string | Number\r\n* Array of strings\r\n* Array of numbers\r\n* Array of objects\r\n* Array of Backbone models\r\n\r\nIt cannot be added on properties having the following value / composite types:\r\n\r\n* object\r\n* Backbone Collection\r\n* Array of arrays\r\n* Array of Backbone collections\r\n\r\n.. and in any other case not mentioned in the list of allowed value types\r\n\r\n\r\n#### EXAMPLE\r\n\r\n\tFacetr(collection).facet('City');          \t\t// valid, City is a string\r\n\tFacetr(collection).facet('Age');  \t        \t// valid, Age is a Number\r\n\tFacetr(collection).facet('Name.LastName');      // valid, LastName is an Array of strings\r\n\tFacetr(collection).facet('FamilyMembers.Name'); // valid, takes value of Name of each object in array FamilyMembers\r\n\tFacetr(collection).facet('Name'); \t        \t// error, Name is an object\r\n\r\n\t// etc..\r\n\r\n\r\n### <a name=\"api-reference\"></a> API Reference\r\n\r\n* [Facetr](#facetr)\r\n\r\n* [FacetCollection](#facetcollection)\r\n    * [facet](#facetcollection-facet)\r\n    * [toJSON](#facetcollection-tojson)\r\n    * [clear](#facetcollection-clear)\r\n    * [remove](#facetcollection-remove)\r\n    * [sortBy](#facetcollection-sortby)\r\n    * [asc](#facetcollection-asc)\r\n    * [desc](#facetcollection-desc)\r\n    * [clearValues](#facetcollection-clearvalues)\r\n    * [facetsOrder](#facetcollection-facetsorder)\r\n    * [collection](#facetcollection-collection)\r\n    * [origLength](#facetcollection-origlength)\r\n    * [settingsJSON](#facetcollection-settingsjson)\r\n    * [initFromSettingsJSON](#facetcollection-initfromsettingsjson)\r\n\r\n* [Facet](#facet)\r\n\t* [value](#facet-value)\r\n\t* [removeValue](#facet-removevalue)\r\n\t* [toJSON](#facet-tojson)\r\n\t* [label](#facet-label)\r\n\t* [sortByCount](#facet-sortbycount)\r\n\t* [sortByActiveCount](#facet-sortbyactivecount)\r\n\t* [sortByValue](#facet-sortbyvalue)\r\n\t* [asc](#facet-asc)\r\n\t* [desc](#facet-desc)\r\n\t* [remove](#facet-remove)\r\n\t* [clear](#facet-clear)\r\n\t* [customData](#facet-customdata)\r\n\r\n* [FacetExp](#facetexp)\r\n\t* [and](#facetexp-and)\r\n\t* [or](#facetexp-or)\r\n\r\n\r\n### <a name=\"facetr\"></a> Facetr\r\n\t\r\n##### Facetr(collection:Backbone.Collection, [id:string]) : FacetCollection                     \r\n\t\r\nInitialize a Collection to be used with Facetr. The first building block of\r\nany Facetr expression. Returns the created FacetCollection instance for\r\nmethod chaining. An id can be associated with the collection.\r\n\t\r\nexample                                                                      \r\n                                                                              \r\n\tFacetr(collection);\r\n\r\n\t// or also\r\n\tFacetr(collection, 'myCollection');\r\n\t\r\n\t// which enables the following syntax\r\n\tFacetr('myCollection') === Facetr(collection); // true                                                      \r\n\t\r\n\r\n### <a name=\"facetcollection\"></a> FacetCollection\r\n\r\n\r\n##### <a name=\"facetcollection-facet\"></a> facet(dotNotationExpr:string, [operator:string]) : Facet\r\n\r\nAdds a Facet on the given collection using the property refered to by the\r\nDot Notation expression (See Dot Notation section for more details).\r\nReturns the created Facet instance to allow method chaining.\r\nTriggers a facet event with the facetName passed to the callback.\r\n\r\nexample\r\n\r\n\tFacetr(collection).on('facet', function(facetName) {\r\n\t\tconsole.log(facetName);\r\n\t});\r\n\r\n\t// add facet on property 'Age' using default operator ('and')\r\n\tFacetr(collection).facet('Age');\r\n\r\n\t// add facet on property 'LastName' of object 'Name' using 'or' operator\r\n\tFacetr(collection).facet('Name.LastName', 'or');\r\n\r\n\t// console output would be\r\n\t// Age\r\n\t// Name.LastName\r\n\r\n\r\n##### <a name=\"facetcollection-tojson\"></a> toJSON() : Array\r\n\r\nReturns an array containing objects representing the status of the facets\r\nadded to the collection. Useful for rendering out facets lists.\r\nEach object in the array is the result of invoking toJSON on each Facet\r\n(see Facet documentation below for the Facet.toJSON method).\r\n\r\nexample\r\n\r\n\t// create a collection with two models\r\n\tvar collection = new Backbone.Collection([\r\n\t    {\r\n\t        'Name'      : {\r\n\t            'FirstName' : 'Bob',\r\n\t            'LastName' : 'Smith'\r\n\t        },\r\n\t        'Age'       : 20\r\n\t    },\r\n\t\t{\r\n\t\t\t'Name' \t\t: {\r\n\t\t\t\t'FirstName' : 'Otto',\r\n\t\t\t\t'LastName' \t: 'Von Braun'\r\n\t\t\t},\r\n\t\t\t'Age'  \t\t: 35\r\n\t\t}\r\n\t]);\r\n\r\n\tFacetr(collection).facet('Name.FirstName').label('First Name');\r\n\tFacetr(collection).facet('Name.FirstName').value('Bob');\r\n\r\n\tvar json = Facetr(collection).toJSON();\r\n\r\n\t// value of json will be an array of Facet data object with the following format:\r\n\t//\r\n\t// [\r\n\t//\t\t{\r\n\t//\t\t\tdata : {\r\n\t//\t\t\t\textOperator : 'and',\r\n\t//\t\t\t\tintOperator : 'or',\r\n\t//\t\t\t\tlabel       : 'First Name',\r\n\t//\t\t\t\tname        : 'Name.FirstName',\r\n\t//\t\t\t\tselected    : true,\r\n\t//\t\t\t\tsort\t\t: {\r\n\t//\t\t\t\t\tby \t\t  : 'value',\r\n\t//\t\t\t\t\tdirection : 'asc'\r\n\t//\t\t\t\t}\r\n\t//\t\t\t\tcustomData : {}\r\n\t//\t\t\t},\r\n\t//\t\t\tvalues : [\r\n\t//\t\t\t\t{\r\n\t//\t\t\t\t\tactive \t\t: true,\r\n\t//\t\t\t\t\tactiveCount : 1,\r\n\t//\t\t\t\t\tcount\t\t: 1,\r\n\t//\t\t\t\t\tvalue\t\t: 'Bob'\r\n\t//\t\t\t\t},\r\n\t//\t\t\t\t{\r\n\t//\t\t\t\t\tactive \t\t: false,\r\n\t//\t\t\t\t\tactiveCount : 0,\r\n\t//\t\t\t\t\tcount\t\t: 1,\r\n\t//\t\t\t\t\tvalue\t\t: 'Otto'\r\n\t//\t\t\t\t}\r\n\t//\t\t\t]\r\n\t//\t\t}\r\n\t// ]\r\n\r\n\r\n##### <a name=\"facetcollection-clear\"></a> clear([silent:boolean]) : FacetCollection\r\n\r\nRemoves all the facets added to the collection and unfilters it accordingly.\r\nUse this method to reset the original models in the collection.\r\nTriggers a clear event, unless true is passed as parameter.\r\n\r\nexample\r\n\r\n\tFacet(collection).on('clear', function() {\r\n\t\tconsole.log('All facets were removed');\r\n\t});\r\n\r\n\tFacet(collection).clear();\r\n\r\n\t// console output\r\n\tAll facets were removed\r\n\r\n\r\n##### <a name=\"facetcollection-remove\"></a> remove() : undefined\r\n\r\nRemoves all the facets and the facetrid added on the collection id upon\r\nFacetr(collection) initialization. Resets the original items in the\r\ncollection.\r\n\r\nexample\r\n\r\n\tFacetr(collection).remove()\r\n\r\n\r\n##### <a name=\"facetcollection-sortby\"></a> sortBy(attribute:string, [silent]) : FacetCollection\r\n\r\nSorts the collection according to the given attribute name. By default\r\nascendent sort is used. See asc() and desc() methods below to define sort\r\ndirection. Triggers sort event unless true is passed as parameter.\r\n\r\nexample\r\n\r\n\tFacetr(collection).on('sort', function(attr, dir) {\r\n\t\tconsole.log('Sorting by ' + attr + ' ' + dir);\r\n\t});\r\n\r\n\tFacetr(collection).sortBy('Age');\r\n\r\n\t// console output\r\n\tSorting by Age asc\r\n\r\n\r\n##### <a name=\"facetcollection-asc\"></a> asc([silent:boolean]) : FacetCollection\r\n\r\nSorts the collection in ascendent order by the attribute selected using\r\nsortBy method.\r\nIf sortBy was not invoked before, this method has no effect. Triggers sort\r\nevent unless true is passed as parameter.\r\n\r\nexample\r\n\r\n\tFacetr(collection).sortBy('Age').asc();\r\n\r\n\r\n##### <a name=\"facetcollection-desc\"></a> desc([silent:boolean]) : FacetCollection\r\n\r\nSorts the collection in descendent order by the attribute selected using\r\nsortBy method.\r\nIf sortBy was not invoked before, this method has no effect. Triggers sort\r\nevent unless true is passed as parameter.\r\n\r\nexample\r\n\r\n\tFacetr(collection).sortBy('Age').asc();\r\n\r\n\r\n##### <a name=\"facetcollection-filterby\"></a> filterBy(attribute:string, regex:string, [silent:boolean]) : FacetCollection\r\n\r\nFilters the collection by mathing the given regex on each model attribuge\r\nvalue. Triggers reset unless true is passed as last parameter.\r\n\r\nexample\r\n\r\n\tFacetr(collection).filterBy('Age', '20');\r\n\r\n\r\n##### <a name=\"facetcollection-clearvalues\"></a> clearValues([silent:boolean]) : FacetCollection\r\n\r\nRemoves all the currently selected values from all the facets, bringing\r\nthe collection to its initial state.\r\nTriggers a clearValues event unless true is passed as parameter.\r\n\r\nexample\r\n\r\n\tFacetr(collection).clearValues();\r\n\r\n\r\n##### <a name=\"facetcollection-facetsorder\"></a> facetsOrder(facetNames:Array) : FacetCollection\r\n\r\nSometimes it is convinient to give the facets list a predefined order. This method\r\ncan be used to achieve this by passing an array of facet names which corresponds to\r\nthe order to be given to the facets in the list.\r\n\r\nexample\r\n\r\n\tFacetr(collection).facet('Age');\r\n\tFacetr(collection).facet('Name.FirstName');\r\n\r\n\t// Facetr(collection).toJSON() has facet 'Age' at index 0 and 'Name.FirstName' at index 1\r\n\r\n\tFacetr(collection).facetsOrder(['Name.FirstName', 'Age']);\r\n\r\n\t// Facetr(collection).toJSON() has facet 'Name.FirstName' at index 0 and 'Age' at index 1\r\n\r\n\r\n##### <a name=\"facetcollection-collection\"></a> collection() : Backbone.Collection\r\n\r\nReturns the reference to the Backbone.Collection. Useful for cases where the reference\r\nis needed but it was declared in another scope and is no more accessible.\r\n\r\nexample\r\n\r\n\tFacetr(collection).collection() === collection; // true\r\n\r\n##### <a name=\"facetcollection-origlength\"></a> origLength() : Number\r\n\r\nReturns the length of the collection before any faceted filtering was applied.\r\n\r\nexample\r\n\r\n\tvar collection = new Backbone.Collection([\r\n\t\t{\r\n\t\t\tName : 'John'\r\n\t\t\tAge\t : 19\r\n\t\t},\r\n\t\t{\r\n\t\t\tName : 'Sarah',\r\n\t\t\tAge  : 35\r\n\t\t}\r\n\t]);\r\n\r\n\tcollection.length() // 2\r\n\r\n\tFacetr(collection).facet('Age').value(35);\r\n\r\n\tcollection.length(); // 1\r\n\tFacetr(collection).origLength(); // 2\r\n\r\n\r\n##### <a name=\"facetcollection-settingsjson\"></a> settingsJSON() : object\r\n\r\nReturns an object representation of the current state of the Facetr collection which\r\ncan be used to reload the same state in future using the initFromSettingsJSON method.\r\n\r\nexample\r\n\t\r\n\tFacetr(collection).facet('Name.FirstName').label('First Name');\r\n\tFacetr(collection).sortBy('Name.FirstName').asc();\r\n\tFacetr(collection).facet('Name.FirstName').value('Bob');\r\n\r\n\tvar json = Facetr(collection).settingsJSON();\r\n\r\n\t// value of json will be the following:\r\n\t//\t\r\n\t// {\r\n\t//\t\tsort : {\r\n\t//\t\t\tby\t:\t\"Name.FirstName\",\r\n\t//\t\t\tdir\t:\t\"asc\"\r\n\t//\t\t},\r\n\t//\t\tfacets : [\r\n\t//\t\t\t{\r\n\t//\t\t\t\tattr\t:\t\"Name.FirstName\",\r\n\t//\t\t\t\teop\t\t:\t\"and\",\r\n\t//\t\t\t\tiop\t\t:\t\"or\",\r\n\t//\t\t\t\tvals\t:\t[ \"Bob\" ]\r\n\t//\t\t\t}\r\n\t//\t\t]\r\n\t//\t}\r\n\r\n##### <a name=\"facetcollection-initfromsettingsjson\"></a> initFromSettingsJSON(json:object) : FacetCollection\r\n\r\nInitializes the Facetr collection using a settings object generated\r\nusing the settingsJSON method.\r\n\r\n\r\n### <a name=\"facet\"></a> Facet\r\n\r\n##### <a name=\"facet-value\"></a> value(value:string, [operator:string]) : FacetExp\r\n\r\nAdds a value to the facet. This will result in the collection being filtered\r\nby { FacetName : 'Value' }. An operator ('and' or 'or') can be passed to change\r\nthe internal logical operator of the facet.\r\nTriggers a 'filter' event passing facetName and facetValue to the handler.\r\n\r\nexample\r\n\t\r\n\tFacetr(collection).on('filter', function(facetName, facetValue) {\r\n\t\tconsole.log('filtered by '+ facetName + ' with value equal ' + facetValue);\r\n\t});\r\n\r\n\tFacetr(collection).facet('Name.FirstName').value('Bob');\r\n\r\n\t// console output: \"filtered by Name.FirstName with value Bob\"\r\n\t// collection contains only models with FirstName = 'Bob'\r\n\r\n##### <a name=\"facet-removevalue\"></a> removeValue(value:string) : FacetExp\r\n\r\nRemoves the given value from the facet and resets the collection to\r\nthe state previous of the filtering caused by the removed value.\r\nTriggers an 'unfilter' event passing facetName and facetValue to the handler.\r\n\r\nexample\r\n\t\r\n\tFacetr(collection).on('unfilter', function(facetName, facetValue) {\r\n\t\tconsole.log('unfiltered by '+ facetName + ' with value equal ' + facetValue);\r\n\t});\r\n\r\n\tFacetr(collection).facet('Name.FirstName').removeValue('Bob');\r\n\r\n\t// console output: \"unfiltered by Name.FirstName with value Bob\"\r\n\t// collection contains again also models with FirstName = 'Bob'\r\n\r\n##### <a name=\"facet-tojson\"></a> toJSON() : object\r\n\r\nReturns an object representation of the current facet data and values.\r\nUseful for rendering the facet to the page.\r\n\r\nexample\r\n\r\n\t// create a collection with two models\r\n\tvar collection = new Backbone.Collection([\r\n\t    {\r\n\t        'Name'      : {\r\n\t            'FirstName' : 'Bob',\r\n\t            'LastName' : 'Smith'\r\n\t        },\r\n\t        'Age'       : 20\r\n\t    },\r\n\t\t{\r\n\t\t\t'Name' \t\t: {\r\n\t\t\t\t'FirstName' : 'Otto',\r\n\t\t\t\t'LastName' \t: 'Von Braun'\r\n\t\t\t},\r\n\t\t\t'Age'  \t\t: 35\r\n\t\t}\r\n\t]);\r\n\r\n\tFacetr(collection).facet('Name.FirstName').label('First Name');\r\n\tFacetr(collection).facet('Name.FirstName').value('Bob');\r\n\r\n\tvar json = Facetr(collection).facet('Name.FirstName').toJSON();\r\n\r\n\t// json is equal to:\r\n\t//\r\n\t//\t{\r\n\t//\t\tdata : {\r\n\t//\t\t\textOperator : 'and',\r\n\t//\t\t\tintOperator : 'or',\r\n\t//\t\t\tlabel       : 'First Name',\r\n\t//\t\t\tname        : 'Name.FirstName',\r\n\t//\t\t\tselected    : true,\r\n\t//\t\t\tsort\t\t: {\r\n\t//\t\t\t\tby \t\t  : 'value',\r\n\t//\t\t\t\tdirection : 'asc'\r\n\t//\t\t\t}\r\n\t//\t\t\tcustomData : {}\r\n\t//\t\t},\r\n\t//\t\tvalues : [\r\n\t//\t\t\t{\r\n\t//\t\t\t\tactive \t\t: true,\r\n\t//\t\t\t\tactiveCount : 1,\r\n\t//\t\t\t\tcount\t\t: 1,\r\n\t//\t\t\t\tvalue\t\t: 'Bob'\r\n\t//\t\t\t},\r\n\t//\t\t\t{\r\n\t//\t\t\t\tactive \t\t: false,\r\n\t//\t\t\t\tactiveCount : 0,\r\n\t//\t\t\t\tcount\t\t: 1,\r\n\t//\t\t\t\tvalue\t\t: 'Otto'\r\n\t//\t\t\t}\r\n\t//\t\t]\r\n\t//\t}\r\n\r\n##### <a name=\"facet-label\"></a> label(label:string) : Facet\r\n\r\nUse this method to set a human readable label for the facet.\r\nThis can be used when rendering the facet on the page.\r\n\r\nexample:\r\n\t\r\n\tFacetr(collection).facet('Name.FirstName').label('First Name');\r\n\r\n\tFacetr(collection).facet('Name.FirstName').toJSON();\r\n\r\n\t// the property data.label has value 'First Name'\r\n\t// while the property data.name stays 'Name.FirstName'\r\n\r\n##### <a name=\"facet-sortbycount\"></a> sortByCount() : Facet\r\n\r\nSorts the facet values by their count. The count is the number \r\nof models in the original collection with an attribute having as name \r\nthe facet name and value the given value.\r\n\r\nexample\r\n\r\n\t// we use the colleciton defined in Basic Usage section\r\n\tvar facet = Facetr(collection).facet('Hobbies');\r\n\t\r\n\tfacet.value('painting'); // painting count = 3  \r\n\tfacet.value('drawing');  // drawing count = 1\r\n\r\n\t// facet.toJSON().data.values[0] = 'drawing'\r\n\t// facet.toJSON().data.values[1] = 'painting'\r\n\r\n\tfacet.sortByCount();\r\n\r\n\t// facet.toJSON().data.values[0] = 'painting'\r\n\t// facet.toJSON().data.values[1] = 'drawing'\r\n\r\n##### <a name=\"facet-sortbyactivecount\"></a> sortByActiveCount() : Facet\r\n\r\nSorts the facet values by their active count. The active count is the number\r\nof models in the current filtered collection with an attribute having as name\r\nthe facet name and value the given value.\r\n\r\nexample\r\n\r\n\tvar facet = Facetr(collection).facet('Hobbies');\r\n\t\r\n\tfacet.value('fishing');   \r\n\tfacet.value('shopping');  \r\n\r\n\t// fishing active count = 1\r\n\t// shopping active count = 2\r\n\r\n\t// facet.toJSON().data.values[0] = 'fishing'\r\n\t// facet.toJSON().data.values[1] = 'shopping'\r\n\r\n\tfacet.sortByActiveCount();\r\n\r\n\t// facet.toJSON().data.values[0] = 'shopping'\r\n\t// facet.toJSON().data.values[1] = 'fishing' \r\n\r\n##### <a name=\"facet-sortbyvalue\"></a> sortByValue() : Facet\r\n\r\nSorts the facet values by their value. This is the default sort.\r\n\r\n##### <a name=\"facet-asc\"></a> asc() : Facet\r\n\r\nSets the direction of the values sort to ascendent.\r\n\r\nexample\r\n\r\n\tFacetr(collection).facet('Name.FirstName').asc();\r\n\r\n##### <a name=\"facet-desc\"></a> desc() : Facet\r\n\r\nSets the direction of the values sort to descendant.\r\n\r\nexample\r\n\r\n\tFacetr(collection).facet('Name.FirstName').sortByCount().desc();\r\n\r\n##### <a name=\"facet-remove\"></a> remove() : undefined\r\n\r\nRemoves the facet and all its values and unfilters the collection accordingly.\r\n\r\n##### <a name=\"facet-clear\"></a> clear() : Facet\r\n\r\nUnselects all the values from the facet. It triggers a 'unfilter' event for each remove value.\r\n\r\n##### <a name=\"facet-customdata\"></a> customData(key:string, value:object) : Facet\r\n\r\nThis method can be used to add arbitrary data to pass to the templates.\r\nData added using this method is included in the object returned by the toJSON() method\r\nin the data.customData property.\r\n\r\nexample\r\n\r\n\tvar facet = Facetr('myCollection').facet('Hobbies').customData('sublabel', 'Available hobbies');\r\n\r\n\t// facet.toJSON().data.customData = { sublabel : 'Available hobbies' }\r\n\r\n### <a name=\"facetexp\"></a> FacetExp\r\n\r\nFacetExp objects are returned from Facet value and removeValue methods.\r\nThey can be used to coincisely define multiple values on a facet, using\r\ndifferent operators.\r\n\r\nexample\r\n\r\n\tFacetr(collection).facet('Age').value(12, 'and');\r\n\tFacetr(collection).facet('Age').value(15, 'or');\r\n\tFacetr(collection).facet('Age').value(39, 'and');\r\n\r\n\t// can also be expressed with the following syntax\r\n\r\n\tFacetr(collection).facet('Age').value(12, 'and').or(15).and(39);\r\n\r\n##### <a name=\"facetexp-and\"></a> and(value:string) : Facet\r\n\r\nEquivalent to facet.value('Value', 'and'), but can be used for FacetExp chains.\r\n\r\n##### <a name=\"facetexp-or\"></a> or(value:string) : Facet\r\n\r\nEquivalent to facet.value('Value', 'or'), but can be used for FacetExp chains.\r\n\r\n### <a name=\"license\"></a> LICENSE\r\n\r\nBackbone.Facetr may be freely distributed under the MIT license.\r\n\r\nCopyright (C) 2012-2013 Arillo GmbH http://arillo.net\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies \r\nof the Software, and to permit persons to whom the Software is furnished to do so, \r\nsubject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies\r\nor substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, \r\nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR \r\nPURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE\r\nFOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR \r\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \r\nDEALINGS IN THE SOFTWARE.","google":"UA-39794666-1","note":"Don't delete this file! It's used internally to help with page regeneration."}